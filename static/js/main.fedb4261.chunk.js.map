{"version":3,"sources":["api/api.ts","api/BA.ts","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/PostDetails/PostDetails.tsx","api/comments.ts","api/posts.ts","App.tsx","index.tsx"],"names":["allPostEndpoint","request","url","options","fetch","then","response","ok","Error","status","statusText","json","getUserPosts","user","selectEndpoint","PostsList","currentId","openPost","useState","posts","setPosts","useEffect","res","className","map","el","userId","title","type","onClick","e","target","nativeEvent","classList","contains","remove","innerText","allButton","Array","from","document","querySelectorAll","forEach","item","textContent","add","id","NewCommentForm","postId","newListComments","name","setName","email","setEmail","body","setBody","nameUncorrect","setNameUncorrect","emailUncorrect","setEmailUncorrect","bodyEmpty","setBodyEmpty","showError","changeState","hideError","onChangeInput","event","dataChange","value","submitNewComment","data","preventDefault","method","headers","JSON","stringify","onSubmit","placeholder","onChange","onBlur","RegExp","test","includes","length","PostDetails","selectedPostId","selectedPost","setSelectedPost","postComments","setPostComments","visibleComments","setVisibleComments","endpoint","getPostComments","getPostDetails","disabled","prev","App","visibleUsers","setVisibleUsers","currentSelect","setCurrentSelect","setSelectedPostId","getUsers","slice","htmlFor","idPost","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.fedb4261.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\nexport const allPostEndpoint = '/posts';\n","import { BASE_URL, allPostEndpoint } from './api';\nimport { Comment } from '../types/Comment';\n\nexport const request = (url: string, options?: {\n  method: string, headers?: any, body?: string\n}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status}-${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nexport const removeFromServer = (url: string) => {\n  return request(url, { method: 'DELETE' });\n};\n\nexport const addComment = (url: string, data: Comment) => {\n  return request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  });\n};\n\nexport const getUserPosts = (user: number) => {\n  const selectEndpoint = (user !== 0)\n    ? `${allPostEndpoint}?userId=${user}`\n    : allPostEndpoint;\n\n  return request(selectEndpoint);\n};\n\nexport const getUsers = (name?: string | undefined) => {\n  const selectEndpoint = (name)\n    ? `/users?username=${name}`\n    : '/users';\n\n  return request(selectEndpoint);\n};\n","import React, { useEffect, useState } from 'react';\nimport './PostsList.scss';\nimport { getUserPosts } from '../../api/BA';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  currentId: number,\n  openPost: (idPost: number | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({ currentId, openPost }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getUserPosts(currentId)\n      .then(res => setPosts(res));\n  }, []);\n\n  useEffect(() => {\n    getUserPosts(currentId)\n      .then(res => setPosts(res));\n  }, [currentId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(el => (\n          <li className=\"PostsList__item\" key={el.id}>\n            <div>\n              <b>\n                {`[User #${el.userId}]: `}\n              </b>\n              {el.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={(e) => {\n                const target = e.nativeEvent.target as HTMLButtonElement;\n\n                if (target.classList.contains('button--active')) {\n                  openPost(null);\n                  target.classList.remove('button--active');\n                  target.innerText = 'Open';\n                } else {\n                  const allButton = Array.from(document.querySelectorAll('.PostsList__button'));\n\n                  [...allButton].forEach(item => {\n                    item.classList.remove('button--active');\n                    const button = item;\n\n                    button.textContent = 'Open';\n                  });\n                  target.classList.add('button--active');\n                  target.innerText = 'Close';\n                  openPost(el.id);\n                }\n              }}\n            >\n              Open\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\nimport { addComment } from '../../api/BA';\n\ntype Props = {\n  postId: number | undefined,\n  newListComments: () => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, newListComments }) => {\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [nameUncorrect, setNameUncorrect] = useState(false);\n  const [emailUncorrect, setEmailUncorrect] = useState(false);\n  const [bodyEmpty, setBodyEmpty] = useState(false);\n\n  const showError = (changeState: React.Dispatch<React.SetStateAction<boolean>>) => {\n    changeState(true);\n  };\n\n  const hideError = (changeState: React.Dispatch<React.SetStateAction<boolean>>) => {\n    changeState(false);\n  };\n\n  const onChangeInput = (\n    event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>,\n    dataChange: (n: string) => void,\n  ) => {\n    const { value } = event.target;\n\n    dataChange(value);\n  };\n\n  const submitNewComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!nameUncorrect && !emailUncorrect && !bodyEmpty && name && body && email) {\n      addComment('/comments', {\n        postId,\n        name,\n        email,\n        body,\n      })\n        .then(() => newListComments());\n    }\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  const onInputName = () => {\n    const regex = new RegExp('^[a-zA-Zа-яА-ЯёЁіІїЇ\\']+$');\n\n    if (!regex.test(name)) {\n      showError(setNameUncorrect);\n    } else {\n      hideError(setNameUncorrect);\n    }\n  };\n\n  const onInputMail = () => {\n    return (!email.includes('@'))\n      ? showError(setEmailUncorrect)\n      : hideError(setEmailUncorrect);\n  };\n\n  const onInputText = () => {\n    return (body.length < 3)\n      ? showError(setBodyEmpty)\n      : hideError(setBodyEmpty);\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={(e) => submitNewComment(e)}\n    >\n      <div className=\"form-field\">\n        {nameUncorrect && <p className=\"NewCommentForm__input-error\">Please input correct name</p>}\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => onChangeInput(e, setName)}\n          onBlur={() => onInputName()}\n        />\n      </div>\n      <div className=\"form-field\">\n        {emailUncorrect && <p className=\"NewCommentForm__input-error\">Please input correct email</p>}\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => onChangeInput(e, setEmail)}\n          onBlur={() => onInputMail()}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        {bodyEmpty && <p className=\"NewCommentForm__input-error\">Please input your comment</p>}\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={(e) => onChangeInput(e, setBody)}\n          onBlur={() => onInputText()}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments } from '../../api/comments';\nimport { removeFromServer } from '../../api/BA';\n\ntype Props = {\n  selectedPostId: number\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [selectedPost, setSelectedPost] = useState<Post>();\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n  const [visibleComments, setVisibleComments] = useState<boolean>(false);\n\n  const newListComments = () => {\n    getPostComments(selectedPostId)\n      .then(res => setPostComments(res));\n  };\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(res => setSelectedPost(res));\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    newListComments();\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n      <section className=\"PostDetails__post\">\n        <p>{selectedPost?.body}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"PostDetails__button button\"\n          disabled={postComments.length === 0}\n          onClick={(e) => {\n            const target = e.target as HTMLButtonElement;\n\n            if (visibleComments) {\n              target.innerText = `Show ${postComments.length} comments`;\n              setVisibleComments(prev => !prev);\n            } else {\n              target.innerText = ` Hide ${postComments.length} comments`;\n              setVisibleComments(prev => !prev);\n            }\n          }}\n        >\n          {` Show ${postComments.length} comments`}\n        </button>\n        {visibleComments\n        && (\n          <ul className=\"PostDetails__list\">\n            {postComments.map(el => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={el.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    removeFromServer(`/comments/${el.id}`)\n                      .then(() => newListComments());\n                  }}\n                >\n                  X\n                </button>\n                <p>{el.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm postId={selectedPost?.id} newListComments={newListComments} />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import { request } from './BA';\n\nexport const getPostComments = (postId: number) => {\n  const endpoint = `/comments?postId=${postId}`;\n\n  return request(endpoint);\n};\n","import { request } from './BA';\n\nexport const getPostDetails = (postId: number) => {\n  const endpoint = `/posts/${postId}`;\n\n  return request(endpoint);\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/BA';\n\ntype User = {\n  id: number,\n  name: string,\n  username: string,\n};\n\nconst App: React.FC = () => {\n  const [visibleUsers, setVisibleUsers] = useState<User[]>([]);\n  const [currentSelect, setCurrentSelect] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number | null>(null);\n\n  useEffect(() => {\n    getUsers()\n      .then(res => setVisibleUsers(res.slice(0, 10)));\n  }, []);\n\n  const openPost = (idPost:number | null) => {\n    setSelectedPostId(idPost);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"selectUsers\">\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"selectUsers\"\n            onChange={(e) => setCurrentSelect(+e.target.value)}\n          >\n            <option value={0}>All users</option>\n            {visibleUsers.map(el => (\n              <option\n                value={el.id}\n                key={el.id}\n              >\n                {el.name}\n              </option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            currentId={currentSelect}\n            openPost={openPost}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}